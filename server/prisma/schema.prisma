// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum BookingStatus {
  PENDING
  BOOKED
  CANCELLED
  EXPIRED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Theatre {
  id        Int      @id @default(autoincrement())
  name      String
  location  String
  createdAt DateTime @default(now())
  screens   Screen[]
}

model Screen {
  id        Int      @id @default(autoincrement())
  theatre   Theatre  @relation(fields: [theatreId], references: [id], onDelete: Cascade)
  theatreId Int
  shows     Show[]
  seats     Seat[]
  createdAt DateTime @default(now())
}

model Show {
  id           Int           @id @default(autoincrement())
  screen       Screen        @relation(fields: [screenId], references: [id], onDelete: Cascade)
  screenId     Int
  movie        Movie         @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId      Int
  prices       Price[]
  format       String // e.g., 2D, 3D, IMAX
  startTime    DateTime
  endTime      DateTime
  bookings     Booking[]
  bookingSeats BookingSeat[]
  createdAt    DateTime      @default(now())
}

model Seat {
  id         Int      @id @default(autoincrement())
  row        String
  number     Int
  seatType   SeatType @relation(fields: [seatTypeId], references: [id], onDelete: Cascade)
  seatTypeId Int
  screen     Screen   @relation(fields: [screenId], references: [id], onDelete: Cascade)
  screenId   Int

  bookingSeats BookingSeat[]

  @@unique([screenId, row, number]) // unique seat per screen
}

model SeatType {
  id     Int     @id @default(autoincrement())
  name   String // Silver, Gold, VIP, etc.
  seats  Seat[]
  prices Price[]
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  duration    Int
  type        String
  language    String
  genre       String?
  rating      Float?
  poster      String?
  trailerUrl  String?
  releaseDate DateTime
  currency    String   @default("INR")
  cast        String[] @default([])
  crew        String[] @default([])
  createdAt   DateTime @default(now())
  shows       Show[]
}

model Price {
  id         Int      @id @default(autoincrement())

  show       Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId     Int
  
  seatType   SeatType @relation(fields: [seatTypeId], references: [id], onDelete: Cascade)
  seatTypeId Int

  dayType  String // Weekday, Weekend (optional)
  price    Int
  currency String @default("INR")
}

model BookingSeat {
  id Int @id @default(autoincrement())

  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId Int

  seat   Seat @relation(fields: [seatId], references: [id])
  seatId Int

  show   Show @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId Int

  price Int

  @@unique([seatId, showId])
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings Booking[]
}

model Booking {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  show   Show @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId Int

  totalAmount   Int
  paymentId     String?
  paymentStatus PaymentStatus @default(PENDING)
  bookingStatus BookingStatus @default(PENDING)

  bookedAt  DateTime? // Set when confirmed
  expiresAt DateTime? // Optional: if using temporary lock
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  bookingSeats BookingSeat[]
}
